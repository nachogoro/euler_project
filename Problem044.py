#!/usr/bin/python3
#coding:utf8

# http://projecteuler.net/problem=44
#
# PROBLEM CONTENT:
# Pentagonal numbers are generated by the formula, Pn = n*(3n-1)/2.
# The first ten pentagonal numbers are:
# 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
#
# It can be seen that P4 + P7 = 22 + 70 = 92 = P8
#
# However, their difference, 70 âˆ’ 22 = 48, is not pentagonal.
#
# Find the pair of pentagonal numbers, Pj and Pk, for which their sum and
# difference are pentagonal and D = |Pk - Pj| is minimised; what is the value
# of D?
#
# EXPLANATION: There is really no guarantee that the difference is actually
# minimised :( A possible algorithm for this is shown in:
# http://codereview.stackexchange.com/a/93325

import time
from math import sqrt

def pentagonal(maximum):
    return [int(n*(3*n-1)/2) for n in range(1,maximum)]

def is_pentagonal(c):
    return float((1 + sqrt(1+24*c))/6).is_integer()

def main():
    n = 0
    computed_pentagonals = pentagonal(10**4)

    for indexj, j in enumerate(computed_pentagonals):
        for indexk in range(indexj + 1, len(computed_pentagonals)):
            diff = computed_pentagonals[indexk] - j
            add = computed_pentagonals[indexk] + j

            if (is_pentagonal(diff) and is_pentagonal(add)):
                print(diff)
                return

if __name__ == '__main__':
    start = time.time()
    main()
    elapsed = time.time() - start
    print('Solved in %.2f seconds' % elapsed)
